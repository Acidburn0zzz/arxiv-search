archives = [
    'astro-ph',
    'cond-mat',
    #'cs',
    #'econ',
    #'eess',
    'gr-qc',
    'hep-ex',
    'hep-lat',
    'hep-ph',
    'hep-th',
    #'math',
    'math-ph',
    #'nlin',
    'nucl-ex',
    'nucl-th',
    #'physics',
    'q-bio',
    #'q-fin',
    'quant-ph',
    #'stat'
]

totals = {
    'math': 299046,
    'math-ph': 299046,
    'hep': 212905,
    'cond-mat': 210802,
    'astro-ph': 205424,
    'cs': 132409,
    'physics': 88632,
    'quant-ph': 63103,
    'gr-qc': 41144,
    'nucl': 34044,
    'nlin': 17421,
    'stat': 17327,
    'q-bio': 14391,
    'q-fin': 5618,
    'eess': 1000,
    'econ': 1000,
}

import random
from collections import Counter
import time
import arxiv

max_results = 1

counts = Counter()
sample = []


for cat in archives:
    Nmax = totals.get(cat, 100000)    # Estimate
    Nstep = round(Nmax / 40)
    i = 0
    while True:
        if counts[cat] >= 40:
            break
        try:
            time.sleep(0.25)
            results = arxiv.query('cat:%s' % cat, start=i)
        except Exception as e:
            print(cat, i, Nstep)
            print('got exception %s' % e)
            time.sleep(2)
            try:
                results = arxiv.query('cat:%s' % cat, start=i)
            except Exception as e2:
                i += Nstep
                continue
        if len(results) > 0:
            print('%s:: %i :: %i' % (cat, i, counts[cat]))
            sample.append((cat, results[0]))
            counts[cat] += 1
        else:
            if counts[cat] < 40:
                Nstep = int(max(round(Nstep/2), 1))
                i = Nstep - 1
            else:
                break
        i += Nstep
